// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open System.Collections.Generic
open Microsoft.FSharp.Collections
open HDD.Snomed

# 13 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | StringValue of (string)
  | DecimalValue of (decimal)
  | IntegerValue of (int)
  | Term of (string)
  | ConceptId of (UInt64)
  | ConceptReference
  | SUBTYPEOF
  | EQUIVALENTSTATUS
  | NESTED_CLOSE
  | NESTED_OPEN
  | GROUP_CLOSE
  | GROUP_OPEN
  | EQUALS
  | COMMA
  | COLON
  | PLUS
  | PIPE
  | WS
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_StringValue
    | TOKEN_DecimalValue
    | TOKEN_IntegerValue
    | TOKEN_Term
    | TOKEN_ConceptId
    | TOKEN_ConceptReference
    | TOKEN_SUBTYPEOF
    | TOKEN_EQUIVALENTSTATUS
    | TOKEN_NESTED_CLOSE
    | TOKEN_NESTED_OPEN
    | TOKEN_GROUP_CLOSE
    | TOKEN_GROUP_OPEN
    | TOKEN_EQUALS
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_PLUS
    | TOKEN_PIPE
    | TOKEN_WS
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_conceptId
    | NONTERM_conceptReference
    | NONTERM_focusConcepts
    | NONTERM_subExpression
    | NONTERM_expression
    | NONTERM_refinement
    | NONTERM_attributeSetRefinement
    | NONTERM_attributeSet
    | NONTERM_attributeGroupRefinement
    | NONTERM_attributeGroupRefinementList
    | NONTERM_attribute
    | NONTERM_concreteValue

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | StringValue _ -> 1 
  | DecimalValue _ -> 2 
  | IntegerValue _ -> 3 
  | Term _ -> 4 
  | ConceptId _ -> 5 
  | ConceptReference  -> 6 
  | SUBTYPEOF  -> 7 
  | EQUIVALENTSTATUS  -> 8 
  | NESTED_CLOSE  -> 9 
  | NESTED_OPEN  -> 10 
  | GROUP_CLOSE  -> 11 
  | GROUP_OPEN  -> 12 
  | EQUALS  -> 13 
  | COMMA  -> 14 
  | COLON  -> 15 
  | PLUS  -> 16 
  | PIPE  -> 17 
  | WS  -> 18 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_StringValue 
  | 2 -> TOKEN_DecimalValue 
  | 3 -> TOKEN_IntegerValue 
  | 4 -> TOKEN_Term 
  | 5 -> TOKEN_ConceptId 
  | 6 -> TOKEN_ConceptReference 
  | 7 -> TOKEN_SUBTYPEOF 
  | 8 -> TOKEN_EQUIVALENTSTATUS 
  | 9 -> TOKEN_NESTED_CLOSE 
  | 10 -> TOKEN_NESTED_OPEN 
  | 11 -> TOKEN_GROUP_CLOSE 
  | 12 -> TOKEN_GROUP_OPEN 
  | 13 -> TOKEN_EQUALS 
  | 14 -> TOKEN_COMMA 
  | 15 -> TOKEN_COLON 
  | 16 -> TOKEN_PLUS 
  | 17 -> TOKEN_PIPE 
  | 18 -> TOKEN_WS 
  | 21 -> TOKEN_end_of_input
  | 19 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_conceptId 
    | 3 -> NONTERM_conceptReference 
    | 4 -> NONTERM_conceptReference 
    | 5 -> NONTERM_focusConcepts 
    | 6 -> NONTERM_focusConcepts 
    | 7 -> NONTERM_subExpression 
    | 8 -> NONTERM_subExpression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_refinement 
    | 13 -> NONTERM_refinement 
    | 14 -> NONTERM_attributeSetRefinement 
    | 15 -> NONTERM_attributeSetRefinement 
    | 16 -> NONTERM_attributeSetRefinement 
    | 17 -> NONTERM_attributeSet 
    | 18 -> NONTERM_attributeGroupRefinement 
    | 19 -> NONTERM_attributeGroupRefinementList 
    | 20 -> NONTERM_attributeGroupRefinementList 
    | 21 -> NONTERM_attribute 
    | 22 -> NONTERM_attribute 
    | 23 -> NONTERM_attribute 
    | 24 -> NONTERM_attribute 
    | 25 -> NONTERM_attribute 
    | 26 -> NONTERM_attribute 
    | 27 -> NONTERM_concreteValue 
    | 28 -> NONTERM_concreteValue 
    | 29 -> NONTERM_concreteValue 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 21 
let _fsyacc_tagOfErrorTerminal = 19

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | StringValue _ -> "StringValue" 
  | DecimalValue _ -> "DecimalValue" 
  | IntegerValue _ -> "IntegerValue" 
  | Term _ -> "Term" 
  | ConceptId _ -> "ConceptId" 
  | ConceptReference  -> "ConceptReference" 
  | SUBTYPEOF  -> "SUBTYPEOF" 
  | EQUIVALENTSTATUS  -> "EQUIVALENTSTATUS" 
  | NESTED_CLOSE  -> "NESTED_CLOSE" 
  | NESTED_OPEN  -> "NESTED_OPEN" 
  | GROUP_CLOSE  -> "GROUP_CLOSE" 
  | GROUP_OPEN  -> "GROUP_OPEN" 
  | EQUALS  -> "EQUALS" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | PLUS  -> "PLUS" 
  | PIPE  -> "PIPE" 
  | WS  -> "WS" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | StringValue _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DecimalValue _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IntegerValue _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Term _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ConceptId _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ConceptReference  -> (null : System.Object) 
  | SUBTYPEOF  -> (null : System.Object) 
  | EQUIVALENTSTATUS  -> (null : System.Object) 
  | NESTED_CLOSE  -> (null : System.Object) 
  | NESTED_OPEN  -> (null : System.Object) 
  | GROUP_CLOSE  -> (null : System.Object) 
  | GROUP_OPEN  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | WS  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 10us; 65535us; 0us; 5us; 8us; 5us; 11us; 5us; 14us; 5us; 16us; 5us; 26us; 5us; 32us; 5us; 34us; 5us; 36us; 5us; 40us; 5us; 10us; 65535us; 0us; 7us; 8us; 7us; 11us; 31us; 14us; 7us; 16us; 7us; 26us; 31us; 32us; 33us; 34us; 31us; 36us; 7us; 40us; 31us; 5us; 65535us; 0us; 10us; 8us; 9us; 14us; 10us; 16us; 10us; 36us; 10us; 4us; 65535us; 0us; 13us; 14us; 15us; 16us; 17us; 36us; 37us; 1us; 65535us; 0us; 2us; 1us; 65535us; 11us; 12us; 1us; 65535us; 11us; 18us; 2us; 65535us; 11us; 20us; 26us; 27us; 1us; 65535us; 11us; 19us; 4us; 65535us; 11us; 25us; 20us; 21us; 22us; 23us; 29us; 30us; 4us; 65535us; 11us; 24us; 26us; 24us; 34us; 35us; 40us; 41us; 1us; 65535us; 32us; 39us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 14us; 25us; 31us; 36us; 38us; 40us; 42us; 45us; 47us; 52us; 57us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 1us; 4us; 2us; 5us; 6us; 1us; 6us; 1us; 6us; 2us; 7us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 13us; 3us; 14us; 15us; 16us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 18us; 2us; 19us; 20us; 2us; 19us; 20us; 2us; 19us; 20us; 1us; 20us; 1us; 20us; 6us; 21us; 22us; 23us; 24us; 25us; 26us; 6us; 21us; 22us; 23us; 24us; 25us; 26us; 3us; 21us; 22us; 23us; 2us; 22us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 2us; 25us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 13us; 15us; 18us; 20us; 22us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 47us; 49us; 51us; 53us; 55us; 57us; 60us; 63us; 66us; 68us; 70us; 77us; 84us; 88us; 91us; 93us; 95us; 97us; 99us; 102us; 104us; 106us; 108us; 110us; |]
let _fsyacc_action_rows = 45
let _fsyacc_actionTableElements = [|3us; 32768us; 5us; 4us; 7us; 16us; 8us; 14us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 0us; 16386us; 1us; 16387us; 4us; 6us; 0us; 16388us; 1us; 16389us; 16us; 8us; 1us; 32768us; 5us; 4us; 0us; 16390us; 1us; 16391us; 15us; 11us; 2us; 32768us; 5us; 4us; 12us; 26us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 5us; 4us; 0us; 16394us; 1us; 32768us; 5us; 4us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 2us; 16398us; 12us; 26us; 14us; 22us; 0us; 16399us; 1us; 32768us; 12us; 26us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 1us; 32768us; 5us; 4us; 1us; 32768us; 11us; 28us; 1us; 16403us; 14us; 29us; 1us; 32768us; 12us; 26us; 0us; 16404us; 1us; 32768us; 13us; 32us; 5us; 32768us; 1us; 44us; 2us; 43us; 3us; 42us; 5us; 4us; 10us; 36us; 1us; 16405us; 14us; 34us; 1us; 16406us; 5us; 4us; 0us; 16407us; 1us; 32768us; 5us; 4us; 1us; 32768us; 9us; 38us; 0us; 16408us; 1us; 16409us; 14us; 40us; 1us; 32768us; 5us; 4us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 7us; 8us; 9us; 11us; 12us; 14us; 16us; 17us; 19us; 22us; 23us; 24us; 26us; 27us; 29us; 30us; 31us; 32us; 35us; 36us; 38us; 39us; 40us; 41us; 43us; 45us; 47us; 49us; 50us; 52us; 58us; 60us; 62us; 63us; 65us; 67us; 68us; 70us; 72us; 73us; 74us; 75us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 2us; 2us; 1us; 1us; 1us; 2us; 3us; 1us; 1us; 3us; 5us; 3us; 4us; 5us; 5us; 3us; 5us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 8us; 9us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16388us; 65535us; 65535us; 16390us; 65535us; 65535us; 16392us; 16393us; 65535us; 16394us; 65535us; 16395us; 16396us; 16397us; 65535us; 16399us; 65535us; 16400us; 16401us; 16402us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 16410us; 16411us; 16412us; 16413us; |]
let _fsyacc_reductions ()  =    [| 
# 218 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 227 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                                            _1 
                   )
# 35 "Parser.fsy"
                 : Expression));
# 238 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : UInt64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                     _1 
                   )
# 38 "Parser.fsy"
                 : 'conceptId));
# 249 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptId)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                                            FocusConcept(_1) 
                   )
# 41 "Parser.fsy"
                 : 'conceptReference));
# 260 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptId)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                                            FocusConcept(_1, _2) 
                   )
# 42 "Parser.fsy"
                 : 'conceptReference));
# 272 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                                            [_1] 
                   )
# 45 "Parser.fsy"
                 : 'focusConcepts));
# 283 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'focusConcepts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                                            _1::_3 
                   )
# 46 "Parser.fsy"
                 : 'focusConcepts));
# 295 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'focusConcepts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                                            SubExpression(_1) 
                   )
# 49 "Parser.fsy"
                 : 'subExpression));
# 306 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'focusConcepts)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'refinement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                            SubExpression(_1, _3) 
                   )
# 50 "Parser.fsy"
                 : 'subExpression));
# 318 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                            Expression(_1) 
                   )
# 53 "Parser.fsy"
                 : 'expression));
# 329 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'subExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                            Expression(_2, DefinitionStatus.EquivalentTo) 
                   )
# 54 "Parser.fsy"
                 : 'expression));
# 340 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'subExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                            Expression(_2, DefinitionStatus.SubTypeOf) 
                   )
# 55 "Parser.fsy"
                 : 'expression));
# 351 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeSetRefinement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                                            _1 
                   )
# 58 "Parser.fsy"
                 : 'refinement));
# 362 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeGroupRefinement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                                            _1 
                   )
# 59 "Parser.fsy"
                 : 'refinement));
# 373 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                                            AttributeSetRefinement(_1):>IRefinement 
                   )
# 62 "Parser.fsy"
                 : 'attributeSetRefinement));
# 384 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeSet)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeGroupRefinementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                                            AttributeSetRefinement(_1, (_2: List<AttributeGroup>)):>IRefinement 
                   )
# 63 "Parser.fsy"
                 : 'attributeSetRefinement));
# 396 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeSet)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeGroupRefinementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                            AttributeSetRefinement(_1, (_3: List<AttributeGroup>)):>IRefinement 
                   )
# 64 "Parser.fsy"
                 : 'attributeSetRefinement));
# 408 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attribute)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                                            AttributeSet(_1 : List<IAttribute>) 
                   )
# 67 "Parser.fsy"
                 : 'attributeSet));
# 419 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeGroupRefinementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                                            AttributeGroupRefinement(_1 : List<AttributeGroup>):>IRefinement 
                   )
# 70 "Parser.fsy"
                 : 'attributeGroupRefinement));
# 430 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeSet)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                                                                      [AttributeGroup(_2)] 
                   )
# 73 "Parser.fsy"
                 : 'attributeGroupRefinementList));
# 441 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeSet)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'attributeGroupRefinementList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                                                                      AttributeGroup(_2)::_5 
                   )
# 74 "Parser.fsy"
                 : 'attributeGroupRefinementList));
# 453 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                                                                      [Attribute(_1, ExpressionValue(_3))] 
                   )
# 77 "Parser.fsy"
                 : 'attribute));
# 465 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                                                                      [Attribute(_1, ExpressionValue(_3))] 
                   )
# 78 "Parser.fsy"
                 : 'attribute));
# 477 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'attribute)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                                                                      Attribute(_1, ExpressionValue(_3)):>IAttribute::_5 
                   )
# 79 "Parser.fsy"
                 : 'attribute));
# 490 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'subExpression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                                                                      [Attribute(_1, NestedExpressionValue(_4))] 
                   )
# 80 "Parser.fsy"
                 : 'attribute));
# 502 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'concreteValue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                                                                      [Attribute(_1, _3)] 
                   )
# 81 "Parser.fsy"
                 : 'attribute));
# 514 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conceptReference)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'concreteValue)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'attribute)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                                                                      Attribute(_1, _3):>IAttribute::_5 
                   )
# 82 "Parser.fsy"
                 : 'attribute));
# 527 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                                            HDD.Snomed.IntegerValue(_1):>IAttributeValue 
                   )
# 85 "Parser.fsy"
                 : 'concreteValue));
# 538 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : decimal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                                            HDD.Snomed.DecimalValue(_1):>IAttributeValue 
                   )
# 86 "Parser.fsy"
                 : 'concreteValue));
# 549 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                            HDD.Snomed.StringValue(_1):>IAttributeValue 
                   )
# 87 "Parser.fsy"
                 : 'concreteValue));
|]
# 561 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 22;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Expression =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
