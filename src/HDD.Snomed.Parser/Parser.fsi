// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | StringValue of (string)
  | DecimalValue of (decimal)
  | IntegerValue of (int)
  | Term of (string)
  | ConceptId of (UInt64)
  | ConceptReference
  | SUBTYPEOF
  | EQUIVALENTSTATUS
  | NESTED_CLOSE
  | NESTED_OPEN
  | GROUP_CLOSE
  | GROUP_OPEN
  | EQUALS
  | COMMA
  | COLON
  | PLUS
  | PIPE
  | WS
type tokenId = 
    | TOKEN_EOF
    | TOKEN_StringValue
    | TOKEN_DecimalValue
    | TOKEN_IntegerValue
    | TOKEN_Term
    | TOKEN_ConceptId
    | TOKEN_ConceptReference
    | TOKEN_SUBTYPEOF
    | TOKEN_EQUIVALENTSTATUS
    | TOKEN_NESTED_CLOSE
    | TOKEN_NESTED_OPEN
    | TOKEN_GROUP_CLOSE
    | TOKEN_GROUP_OPEN
    | TOKEN_EQUALS
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_PLUS
    | TOKEN_PIPE
    | TOKEN_WS
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_conceptId
    | NONTERM_conceptReference
    | NONTERM_focusConcepts
    | NONTERM_subExpression
    | NONTERM_expression
    | NONTERM_refinement
    | NONTERM_attributeSetRefinement
    | NONTERM_attributeSet
    | NONTERM_attributeGroupRefinement
    | NONTERM_attributeGroupRefinementList
    | NONTERM_attribute
    | NONTERM_concreteValue
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Expression) 
